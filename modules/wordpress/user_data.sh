#!/bin/bash
set -e
exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
echo "=========================================="
echo "Starting WordPress installation at $(date)"
echo "=========================================="

# Update system
echo "Updating system packages..."
yum update -y

# Install Amazon Linux Extras to get modern PHP
echo "Enabling Amazon Linux Extras..."
amazon-linux-extras enable php8.2

# Install Apache and PHP 8.2
echo "Installing Apache and PHP 8.2..."
yum clean metadata
yum install -y httpd php php-mysqlnd php-gd php-xml php-mbstring php-json php-opcache mariadb

# Start and enable Apache
echo "Starting Apache web server..."
systemctl start httpd
systemctl enable httpd

# Download WordPress
echo "Downloading WordPress..."
cd /var/www/html
wget -q https://wordpress.org/latest.tar.gz
tar xzf latest.tar.gz
mv wordpress/* .
rmdir wordpress
rm latest.tar.gz

# Generate security salts
echo "Downloading security salts..."
SALTS=$(curl -s https://api.wordpress.org/secret-key/1.1/salt/)

# Create wp-config.php from scratch
echo "Creating wp-config.php..."
cat > wp-config.php << WPCONFIG
<?php
/**
 * WordPress Database Configuration
 * Generated by Terraform deployment
 */

// ** MySQL settings ** //
define( 'DB_NAME', '${db_name}' );
define( 'DB_USER', '${db_username}' );
define( 'DB_PASSWORD', '${db_password}' );
define( 'DB_HOST', '${db_host}' );
define( 'DB_CHARSET', 'utf8mb4' );
define( 'DB_COLLATE', '' );

/**#@+
 * Authentication Unique Keys and Salts
 */
$SALTS
/**#@-*/

/**
 * WordPress Database Table prefix
 */
\$table_prefix = 'wp_';

/**
 * For developers: WordPress debugging mode
 */
define( 'WP_DEBUG', false );

/* That's all, stop editing! Happy publishing. */

/** Absolute path to the WordPress directory. */
if ( ! defined( 'ABSPATH' ) ) {
	define( 'ABSPATH', __DIR__ . '/' );
}

/** Sets up WordPress vars and included files. */
require_once ABSPATH . 'wp-settings.php';
WPCONFIG

echo "wp-config.php created successfully"

# Create health check endpoint for ALB
echo "Creating health check endpoint..."
cat > /var/www/html/health.php << 'EOF'
<?php
// ALB Health Check Endpoint
header('Content-Type: text/plain');
http_response_code(200);
echo "OK";
?>
EOF

# Set correct permissions
echo "Setting file permissions..."
chown -R apache:apache /var/www/html
chmod 640 /var/www/html/wp-config.php
chmod 755 /var/www/html/health.php

# Configure Apache to handle WordPress permalinks
echo "Configuring Apache for WordPress..."
cat > /etc/httpd/conf.d/wordpress.conf << 'EOF'
<Directory "/var/www/html">
    AllowOverride All
    Require all granted
</Directory>
EOF

# Restart Apache to apply all changes
echo "Restarting Apache..."
systemctl restart httpd

# Test database connection
echo "Testing database connection..."
mysql -h ${db_host} -u ${db_username} -p${db_password} -e "SELECT 1;" ${db_name} 2>&1 && \
    echo "Database connection successful!" || \
    echo "WARNING: Database connection failed!"

# Verify health check endpoint
echo "Verifying health check endpoint..."
sleep 5
curl -s http://localhost/health.php && echo "" || echo "WARNING: Health check endpoint not responding"

# Verify wp-config.php syntax
echo "Verifying wp-config.php syntax..."
php -l /var/www/html/wp-config.php

# Display PHP version for verification
echo "PHP version installed:"
php -v | head -1

echo "=========================================="
echo "WordPress installation completed at $(date)"
echo "=========================================="